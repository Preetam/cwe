package main

import (
	"bytes"
	"encoding/csv"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
)

func main() {
	flagCSV := flag.String("csv", "2000.csv", "CSV file of CWEs")
	flagOutput := flag.String("output", "cwe.go", "Output file")
	flag.Parse()

	log.Printf("Reading '%s' and writing to '%s'", *flagCSV, *flagOutput)

	contents, err := ioutil.ReadFile(*flagCSV)
	if err != nil {
		log.Fatal(err)
	}

	output := `// This file is autogenerated, do not edit; changes may be undone by the next 'go generate'.

// Package cwe is a list of CWEs and metadata.
package cwe

// CWE is a CWE weakness.
type CWE struct {
	Name string
	WeaknessAbstraction string
	Status string
	Description string
	ExtendedDescription string
	RelatedWeaknesses string
	WeaknessOrdinalities string
	ApplicablePlatforms string
	BackgroundDetails string
	AlternateTerms string
	ModesOfIntroduction string
	ExploitationFactors string
	LikelihoodOfExploit string
	CommonConsequences string
	DetectionMethods string
	PotentialMitigations string
	ObservedExamples string
	FunctionalAreas string
	AffectedResources string
	TaxonomyMappings string
	RelatedAttackPatterns string
	Notes string
}

var CWEs = map[string]CWE{
`

	r := csv.NewReader(bytes.NewReader(contents))
	r.FieldsPerRecord = -1
	records, _ := r.ReadAll()
	for i, record := range records {
		// Skip header
		if i == 0 {
			continue
		}

		format := `
		"CWE-%s": {
			Name: "%s",
			WeaknessAbstraction: "%s",
			Status: "%s",
			Description: "%s",
			ExtendedDescription: "%s",
			RelatedWeaknesses: "%s",
			WeaknessOrdinalities: "%s",
			ApplicablePlatforms: "%s",
			BackgroundDetails: "%s",
			AlternateTerms: "%s",
			ModesOfIntroduction: "%s",
			ExploitationFactors: "%s",
			LikelihoodOfExploit: "%s",
			CommonConsequences: "%s",
			DetectionMethods: "%s",
			PotentialMitigations: "%s",
			ObservedExamples: "%s",
			FunctionalAreas: "%s",
			AffectedResources: "%s",
			TaxonomyMappings: "%s",
			RelatedAttackPatterns: "%s",
			Notes: "%s",
		},`
		output += fmt.Sprintf(format,
			record[0],
			record[1],
			record[2],
			record[3],
			record[4],
			record[5],
			record[6],
			record[7],
			record[8],
			record[9],
			record[10],
			record[11],
			record[12],
			record[13],
			record[14],
			record[15],
			record[16],
			record[17],
			record[18],
			record[19],
			record[20],
			record[21],
			record[22],
		)
	}
	output += "\n}\n"

	formatted, err := format.Source([]byte(output))
	if err != nil {
		log.Fatal(err)
	}

	err = ioutil.WriteFile(*flagOutput, formatted, 0644)
	if err != nil {
		log.Fatal(err)
	}
}
